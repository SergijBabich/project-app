{"version":3,"sources":["components/project-general/project-general.module.css","components/sidebar/sidebar.module.css","components/settings/settings.module.css","utils/validators/validators.ts","utils/form-control.tsx","components/login/login.component.tsx","api/api.ts","redux/login-reducer.ts","components/login/login-container.component.ts","components/sidebar/sidebar.component.tsx","components/project-creator/project_creator.component.tsx","redux/project-—Åreator-reducer.ts","components/project-creator/project-creator-container.component.tsx","components/project-general/project-general.component.tsx","redux/project-reducer.ts","components/project-general/project-general-container.component.tsx","components/settings/settings.component.tsx","components/main/main.component.tsx","redux/redux_store.ts","App.tsx","serviceWorker.js","index.js","utils/form-control.module.css","components/login/login.module.css","components/project-creator/project-creator.module.css","components/main/main.module.css"],"names":["module","exports","maxLength","minLength","FormControl","input","meta","props","child","hasError","touched","error","className","s","form_control","children","Input","restProps","Textarea","required","value","checkformat","replace","minLength8","length","LoginFormRedux","reduxForm","form","history","useHistory","currentLogin","currentToken","push","m","login__form","onSubmit","handleSubmit","login","Field","component","validate","name","placeholder","type","Login","currentFont","JSON","parse","localStorage","getItem","token","errorCode","console","log","sendFormForAuthorization","password","message","instance","axios","baseURL","UsersApi","get","then","response","data","title","description","post","id","put","delete","initialState","status","sendCode","setUserToken","loginReducer","state","action","LoginContainer","connect","dispatch","a","Sidebar","sidebar","to","activeClassName","onClick","clear","ProjestsTitleRedux","p","ProjestsDescriptionRedux","cols","rows","textarea","ProjectCreator","useState","step","setStep","setTitle","setProjectsTitle","setProjectsDescription","createUsersProject","setTimeout","switchForms","projectId","projectCreatorReducer","ProjectCreatorContainer","projectCreator","ProjectsList","show","setShow","projects__container","projects__list","project__title","projectsList","project__button","button","removeUsersProject","editUserProject","ShowFullProjectData","edit","setEdit","hideForm","project__info","project__description","_id","EditFormRedux","titleEdit","descriptionEdit","initialValues","enableReinitialize","ProjectGeneral","useEffect","getUsersProjects","projects","map","el","index","key","getUsersProjectsList","projectReducer","ProjectGeneralContainer","Settings","mode","setMode","settings","checked","onChange","triggerSearch","Main","main","main__sidebar","main__general","path","render","Suspense","reducers","combineReducers","formReducer","persistedState","serializedState","e","loadFromLocalStorage","store","createStore","applyMiddleware","thunkMiddleware","subscribe","stringify","setItem","saveToLocalStorage","getState","window","App","basename","process","exact","class","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"sFACAA,EAAOC,QAAU,CAAC,SAAW,kCAAkC,eAAiB,wCAAwC,gBAAkB,yCAAyC,OAAS,gCAAgC,eAAiB,wCAAwC,KAAO,8BAA8B,QAAU,iCAAiC,SAAW,kCAAkC,cAAgB,uCAAuC,qBAAuB,gD,oBCAheD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,0B,oBCA9DD,EAAOC,QAAU,CAAC,SAAW,6B,8HCoBMC,EAMAC,E,8GCvB7BC,EAAc,SAAC,GAAkC,EAAjCC,MAAkC,IAA3BC,EAA0B,EAA1BA,KAAeC,GAAW,EAApBC,MAAoB,yCAC9CC,EAAWH,EAAKI,SAAWJ,EAAKK,MACtC,OACE,yBAAKC,UAAWC,IAAEC,aAAa,KAAML,EAAUI,IAAEF,MAAO,KACvD,6BACGJ,EAAMQ,UAET,6BACEN,GAAY,0BAAMG,UAAWC,IAAEF,OAAQL,EAAKK,UAOvCK,EAAQ,SAACT,GAAgB,IAC5BF,EAAmCE,EAAnCF,MAAsBY,GAAaV,EAA5BD,KAA4BC,EAAtBC,MADc,YACQD,EADR,2BAElC,OAAO,kBAAC,EAAgBA,EAAjB,IAAyB,2CAAWF,EAAWY,IAA/C,MAEGC,EAAW,SAACX,GAAgB,IAC/BF,EAAmCE,EAAnCF,MAAsBY,GAAaV,EAA5BD,KAA4BC,EAAtBC,MADiB,YACKD,EADL,2BAErC,OAAO,kBAAC,EAAgBA,EAAjB,IAAyB,8CAAcF,EAAWY,IAAlD,MDzBGE,EAAW,SAACC,GACrB,IAAIA,EACJ,MAAO,qBAWIC,EAAc,SAACD,GAC1B,OAAIA,EAAYA,IAAUA,EAAME,QAAQ,cAAe,IAAY,yCACjE,EAEK,qB,wBERLC,GFY6BrB,EEbE,GFmBFC,EElBC,EFkBkB,SAACiB,GACnD,GAAIA,EAAMI,OAASrB,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,cEmC5BsB,EAAiBC,YAAU,CAC7BC,KAAK,aADcD,EAnBL,SAACnB,GAEf,IAAIqB,EAAUC,cAKd,OAHGtB,EAAMuB,cAAgBvB,EAAMwB,cAC1BH,EAAQI,KAAK,kBAGd,oCACC,0BAAMpB,UAAWqB,IAAEC,YAAcC,SAAY5B,EAAM6B,cAC1C,uCACA7B,EAAM8B,OAAS,kBAACC,EAAA,EAAD,CAAOC,UAAWvB,EAAQwB,SAAU,CAACrB,GAAesB,KAAM,QAAUC,YAAY,gBAChF,kBAACJ,EAAA,EAAD,CAAOC,UAAWvB,EAAQwB,SAAU,CAACrB,EAAUI,GAAaoB,KAAK,WAAcF,KAAM,WAAaC,YAAY,mBAClI,gDAUEE,EAxDD,SAACrC,GACX,IACIuB,EACAC,EAFAH,EAAUC,cAGTgB,EAAcC,KAAKC,MAAMC,aAAaC,QAAQ,UAC/CJ,IACCf,EAAee,EAAYR,MAAMA,MACjCN,EAAec,EAAYR,MAAMa,OAgBtC,OAHG3C,EAAMuB,cAAgBvB,EAAMwB,cAC3BH,EAAQI,KAAK,kBAGb,yBAAKpB,UAAWqB,IAAEN,MACd,kBAACF,EAAD,CAAgBK,aAAgBA,EAAcC,aAAcA,EAAcM,MAAO9B,EAAM8B,MAAOc,UAAW5C,EAAM4C,UAAWhB,SAfpG,SAACf,GACvBb,EAAM8B,QACNe,QAAQC,IAAI,SACZ9C,EAAM+C,yBAAyBlC,EAAMiB,MAAOjB,EAAMmC,WAEnDhD,EAAM8B,QACL9B,EAAM+C,yBAAyB/C,EAAM8B,MAAOjB,EAAMmC,UACjD3B,EAAQI,KAAK,sBASbzB,EAAM4C,WAAa,yBAAKvC,UAAWqB,IAAEuB,SAAUjD,EAAM4C,a,iCC7B5DM,E,OAAWC,OAAa,CAC5BC,QAAS,sCAGEC,EAAW,SACXvB,EAAYkB,GACjB,OAAOE,EAASI,IAAT,2BAAiCxB,EAAjC,qBAAmDkB,GAAY,CAClElB,QACAkB,aACDO,MAAK,SAAAC,GAAe,OAAOA,EAASC,QAAO,SAACrD,GAAa,OAAOA,MAL9DiD,EAAW,SAOHK,EAAcC,EAAoBhB,GAC/C,OAAOO,EAASU,KAAT,6BAAoCjB,GAAS,CAChDe,QAAOC,cAAYhB,UACpBY,MAAK,SAAAC,GACJ,OAAOA,EAASC,SAXfJ,EAAW,SAcFK,EAAeC,EAAqBE,EAAYlB,GAC9D,OAAOO,EAASY,IAAT,uBAA6BD,GAAM,CACtCH,QACAC,cACAhB,UACDY,MAAK,SAAAC,GACJ,OAAOA,EAASC,SApBfJ,EAAW,SAuBJV,GACZ,OAAOO,EAASI,IAAT,+BAAqCX,GAAS,CACjDA,UACDY,MAAK,SAAAC,GACJ,OAAOA,EAASC,SA3BfJ,EAAW,SA8BNQ,EAAYlB,GACtB,OAAOO,EAASa,OAAT,8BAAuCF,EAAvC,kBAAmDlB,IAASY,MAAK,SAAAC,GACpE,OAAOA,EAASC,SChCxBO,EAA6B,CAC9BrB,MAAO,KACPsB,OAAO,KACPC,SAAS,KACTpC,MAAM,KACNc,UAAW,MAkBRuB,EAAe,SAACV,GACpB,MAAO,CACLrB,KAnCkB,gBAoClBqB,SAoBWW,EAtCQ,WAAyC,IAAvCC,EAAsC,uDAA9BL,EAAcM,EAAgB,uCAC7D,OAAQA,EAAOlC,MACb,IApBkB,gBAsBhB,OADFS,QAAQC,IAAIwB,EAAOb,MACV,2BACJY,GADH,IACW1B,MAAO2B,EAAOb,KAAKd,MACnBsB,OAAQK,EAAOb,KAAKQ,OACpBnC,MAAOwC,EAAOb,KAAK3B,MACnBc,UAAW0B,EAAOb,KAAKS,WAEpC,QACI,OAAOG,ICbAE,EADQC,aAXD,SAACH,GACrB,MAAO,CACL1B,MAAO0B,EAAMvC,MAAMa,MACnBsB,OAAQI,EAAMvC,MAAMmC,OACpBnC,MAAOuC,EAAMvC,MAAMA,MACnBc,UAAWyB,EAAMvC,MAAMc,aAMqB,CAACG,yBD2BT,SAACjB,EAAekB,GACtD,8CAAQ,WAAOyB,GAAP,eAAAC,EAAA,sEACYrB,EAAevB,EAAOkB,GADlC,OACDS,EADC,OAELZ,QAAQC,IAAIW,GACVgB,EAASN,EAAaV,IAHnB,2CAAR,wDC5BqBe,CAAsDnC,G,0BCI9DsC,EAlBC,WAIZ,OACI,6BACI,yBAAKtE,UAAWC,IAAEsE,SACd,kBAAC,IAAD,CAASC,GAAG,iBAAiBC,gBAAgB,YAA7C,gBACA,kBAAC,IAAD,CAASD,GAAG,uBAAuBC,gBAAgB,YAAnD,kBACA,kBAAC,IAAD,CAASD,GAAG,SAASC,gBAAgB,YAAW,yBAAKC,QAR5C,WACjBtC,aAAauC,UAO2C,YAChD,kBAAC,IAAD,CAASH,GAAG,iBAAiBC,gBAAgB,YAA7C,e,iBCkFVG,EAAqB9D,YAAU,CACjCC,KAAK,aADkBD,EAzBD,SAACnB,GACvB,OACI,oCACC,0BAAQK,UAAW6E,IAAE9D,KAAMQ,SAAY5B,EAAM6B,cACzC,2CACA,kBAACE,EAAA,EAAD,CAAOC,UAAWvB,EAAWwB,SAAU,CAACrB,EAAUE,GAAeoB,KAAM,QAAUC,YAAY,sBAC7F,+CAuBPgD,EAA2BhE,YAAU,CACvCC,KAAK,aADwBD,EAjBD,SAACnB,GAC7B,OACI,oCACC,0BAAQK,UAAW6E,IAAE9D,KAAMQ,SAAY5B,EAAM6B,cACzC,kDACA,kBAACE,EAAA,EAAD,CAAOC,UAAWrB,EAAWyE,KAAK,KAAKC,KAAK,KAAMhF,UAAW6E,IAAEI,SAAUrD,SAAU,CAACrB,GAAYsB,KAAM,gBACtG,gDAeEqD,EAzFQ,SAACvF,GAAe,IAAD,EACVwF,mBAAS,GADC,mBAC3BC,EAD2B,KACrBC,EADqB,OAERF,mBAAS,MAFD,mBAE3B9B,EAF2B,KAEpBiC,EAFoB,KAG9BtE,EAAUC,cACduB,QAAQC,IAAI9C,GACZ,IAAM4F,EAAmB,SAAC/E,GACtB8E,EAAS9E,EAAM6C,OACfgC,EAAQD,EAAM,IAGZI,EAAyB,SAAChF,GAC5Bb,EAAM8F,mBAAmBpC,EAAO7C,EAAM8C,YAAa3D,EAAM2C,OACzD+C,EAAQD,EAAK,IAWjB,GAJW,IAARA,GAHCM,YAAW,kBAAK1E,EAAQI,KAAK,oBAAoB,MAOjDzB,EAAM2C,MACN,OAAO,kBAAC,IAAD,CAAUkC,GAAE,WAoBvB,OACI,oCAjBgB,WAEhB,OADAhC,QAAQC,IAAI2C,GACLA,GACH,KAAK,EACL,OACI,kBAACR,EAAD,CAAoBrD,SAAUgE,IAElC,KAAK,EACL,OACI,kBAACT,EAAD,CAA0BvD,SAAUiE,IAExC,QACI,OAAO,sJAOPG,KC1DZhC,EAAe,CACfiC,UAAW,MAkCAC,EA/BiB,WAAyC,IAAvC7B,EAAsC,uDAA9BL,EAAcM,EAAgB,uCACtE,OAAQA,EAAOlC,MACb,IAPmB,iBAQjB,MAAO,CACL6D,UAAW3B,EAAO2B,WAGtB,QACI,OAAO5B,ICAA8B,EADiB3B,aATV,SAACH,GACrB,MAAO,CACL1B,MAAO0B,EAAMvC,MAAMa,MACnBsD,UAAW5B,EAAM+B,eAAeH,aAMqB,CAACH,mBDcxB,SAACpC,EAAOC,EAAahB,GACrD,8CAAQ,WAAO8B,GAAP,eAAAC,EAAA,6DACN7B,QAAQC,IAAIY,EAAOC,EAAahB,GAD1B,SAEWU,EAA0BK,EAAOC,EAAahB,GAFzD,OAEFc,EAFE,OAGLgB,EAZI,CACLrC,KAnBmB,iBAoBnB6D,UAU0BxC,EAAKwC,YAC/BpD,QAAQC,IAAIW,GAJN,2CAAR,wDCf8Be,CAAgDe,G,kBCgC1Ec,GAAe,SAACrG,GAA2B,IAAD,EAEpBwF,oBAAS,GAFW,mBAErCc,EAFqC,KAE/BC,EAF+B,KAQ5C,OACI,yBAAKlG,UAAW6E,KAAEsB,qBACd,yBAAKnG,UAAW6E,KAAEuB,gBACd,yBAAKpG,UAAW6E,KAAEwB,gBAAiB1G,EAAM2G,aAAajD,OACtD,yBAAKrD,UAAW6E,KAAE0B,iBACb,4BAASvG,UAAW6E,KAAE2B,OAAS9B,QATtB,WACtBwB,GAASD,KAQI,cAGRA,GAAQ,kBAAC,GAAD,CAAqBC,QAASA,EACT5D,MAAO3C,EAAM2C,MACbmE,mBAAoB9G,EAAM8G,mBAC1BC,gBAAiB/G,EAAM+G,gBACvBJ,aAAgB3G,EAAM2G,iBAO1DK,GAAsB,SAAChH,GAAe,IAAD,EACfwF,mBAAS,WADM,mBAChCyB,EADgC,KAC1BC,EAD0B,KAWjCC,EAAW,WACbnH,EAAMuG,SAAQ,GACdW,EAAQ,YAQZ,OACC,yBAAM7G,UAAW6E,KAAEkC,eACL,YAATH,GACF,6BACI,yBAAK5G,UAAW6E,KAAEwB,gBACf1G,EAAM2G,aAAajD,MACpB,6BACE,4BAAQrD,UAAW6E,KAAE2B,OAAQ9B,QAzBtB,WACfmC,EAAQ,YAwBA,UAGJ,yBAAK7G,UAAW6E,KAAEmC,sBACfrH,EAAM2G,aAAahD,cAIf,WAATsD,GACE,oCACE,6BACI,4BAAQ5G,UAAW6E,KAAE2B,OAAQ9B,QAvBnB,WACpB/E,EAAMuG,SAAQ,GACdvG,EAAM8G,mBAAmB9G,EAAM2G,aAAaW,IAAKtH,EAAM2C,QAqBUP,KAAK,SAAUF,KAAK,UAA3E,YAEJ,6BACE,kBAACqF,GAAD,CAAe3F,SAnCR,SAACf,GAChBb,EAAM+G,gBAAgBlG,EAAM2G,UAAW3G,EAAM4G,gBAAiBzH,EAAM2G,aAAaW,IAAKtH,EAAM2C,OAC1FwE,KAkCqBR,aAAe3G,EAAM2G,aACrBe,cAAe,CACEF,UAAWxH,EAAM2G,aAAajD,MAC9B+D,gBAAgBzH,EAAM2G,aAAahD,mBAwBtE4D,GAAgBpG,YAAU,CACnCC,KAAK,WACLuG,oBAAoB,GAFKxG,EAZZ,SAACnB,GACd,OACI,oCACC,0BAAOK,UAAW6E,KAAE9D,KAAMQ,SAAY5B,EAAM6B,cACxC,kBAACE,EAAA,EAAD,CAAOC,UAAWvB,EAAQwB,SAAU,CAACrB,EAAUE,GAAiBoB,KAAM,cACtE,kBAACH,EAAA,EAAD,CAAOC,UAAWrB,EAAWyE,KAAK,KAAKC,KAAK,KAAMhF,UAAW6E,KAAEI,SAAUrD,SAAU,CAACrB,GAAWsB,KAAM,oBACrG,+CAYE0F,GA3HQ,SAAC5H,GAMpB,OAJD6H,qBAAU,WACR7H,EAAM8H,iBAAiB9H,EAAM2C,SAC3B,IAEC3C,EAAM2C,MAKN,yBAAKtC,UAAW6E,KAAE6C,UACd/H,EAAM2G,aAAaqB,KAAK,SAACC,EAAkBC,GAC1C,OAAQ,kBAAC,GAAD,CAAgBC,IAAKD,EAAOjE,OAAQjE,EAAMiE,OAAQ6C,mBAAoB9G,EAAM8G,mBAAqBgB,iBAAkB9H,EAAM8H,iBAAkBnF,MAAO3C,EAAM2C,MAAOoE,gBAAiB/G,EAAM+G,gBAAkBJ,aAAesB,QAN7N,kBAAC,IAAD,CAAUpD,GAAE,YC7BvBb,GAAe,CAChBrB,MAAO,KACPgE,aAAc,GACd1C,OAAO,MAmBJmE,GAAuB,SAAC3E,GAC5B,MAAO,CACLrB,KA1BuB,qBA2BvBqB,SAsCW4E,GAzDU,WAAyC,IAAvChE,EAAsC,uDAA9BL,GAAcM,EAAgB,uCAC/D,OAAQA,EAAOlC,MACb,IAVuB,qBAWrB,MAAO,CACJuE,aAAcrC,EAAOb,MAGxB,IAdc,cAeZ,OAAO,2BACFY,GADL,IACYJ,OAAQK,EAAOL,SAE/B,QACI,OAAOI,ICRAiE,GADiB9D,aAVV,SAACH,GACrB,MAAO,CACL1B,MAAO0B,EAAMvC,MAAMa,MACnBgE,aAActC,EAAM0D,SAASpB,aAC7B1C,OAAQI,EAAM0D,SAAS9D,UAM8B,CAAC6D,iBDoC1B,SAACnF,GAC/B,8CAAQ,WAAO8B,GAAP,eAAAC,EAAA,sEACYrB,EAAyBV,GADrC,OACDc,EADC,OAEHgB,EAAS2D,GAAqB3E,IAF3B,2CAAR,uDCrC0EsD,gBD6B7C,SAACrD,EAAeC,EAAoBE,EAAYlB,GAC7E,8CAAQ,WAAO8B,GAAP,eAAAC,EAAA,sEACYrB,EAA2BK,EAAOC,EAAYE,EAAIlB,GAD9D,OACDc,EADC,OAEHgB,EAAS2D,GAAqB3E,IAF3B,2CAAR,uDC9B2FqD,mBD0C3D,SAACjD,EAAYlB,GAC7C,8CAAS,WAAO8B,GAAP,eAAAC,EAAA,sEACWrB,EAAuBQ,EAAIlB,GADtC,OACFc,EADE,OAENgB,EAAS2D,GAAqB3E,IAFxB,2CAAT,wDC3C8Be,CAAmFoD,I,qBCYpGW,GAtBE,SAACvI,GAAW,IAAD,EAEAwF,oBAAS,GAFT,mBAEjBgD,EAFiB,KAEXC,EAFW,KASxB,OACG,yBAAKpI,UAAWC,KAAEoI,UACZ,2BACGC,QAASH,EACPpG,KAAK,WACLF,KAAM,OACN0G,SAXM,WACjBH,GAASD,GACTxI,EAAM6I,cAAcL,MAWd,8C,oBCUEM,GAvBF,SAAC9I,GACV,OACI,yBAAKK,UAAW0I,KAAKA,MACjB,yBAAK1I,UAAW0I,KAAKC,eACjB,kBAAC,EAAD,OAEJ,yBAAK3I,UAAW0I,KAAKE,eACjB,kBAAC,IAAD,CAAOC,KAAK,uBAAwBlH,UAAcmE,IAClD,kBAAC,IAAD,CAAO+C,KAAK,iBAAkBC,OAAW,WACtC,OAAU,kBAAC,IAAMC,SAAP,KACP,kBAAC,GAAD,UAGN,kBAAC,IAAD,CAAOF,KAAK,iBAAkBC,OAAW,WACtC,OAAU,kBAAC,IAAMC,SAAP,KACP,kBAAC,GAAD,CAAUP,cAAe7I,EAAM6I,uB,4BCdjDQ,GAAWC,aAAgB,CAC9BlD,eAAeF,EACfpE,MAAMsC,EACN2D,SAAUM,GACVjH,KAAMmI,OAsBDC,GAXuB,WACzB,IACE,IAAMC,EAAmBhH,aAAaC,QAAQ,SAC9C,GAAwB,OAApB+G,EAA0B,OAC9B,OAAOlH,KAAKC,MAAMiH,GAClB,MAAMC,GAEN,YADA7G,QAAQC,IAAI4G,IAKKC,GAInBC,GAAaC,aAAYR,GAASG,GAAeM,aAAgBC,OACrEH,GAAMI,WAAU,kBAxBW,SAAC3F,GACxB,IACE,IAAMoF,EAAkBlH,KAAK0H,UAAU5F,GACvC5B,aAAayH,QAAQ,QAAST,GAC9B,MAAMC,GACN7G,QAAQC,IAAI4G,IAmBGS,CAAmBP,GAAMQ,eAC9CC,OAAOT,MAAQA,GAECA,UCMDU,GAtCH,WAAO,IAAD,EAEQ9E,oBAAS,GAFjB,mBAETgD,EAFS,KAEHC,EAFG,KAGVI,EAAgB,SAAChI,GACrB4H,EAAQ5H,IAEV,OACE,yBAAKR,UAAWmI,EAAM,kBAAmB,kBACvC,kBAAC,IAAD,CAAY+B,SAAUC,gBACpB,kBAAC,IAAD,CAAWZ,MAAQA,IACnB,kBAAC,IAAD,CAAOa,OAAK,EAACvB,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,IAAD,CAAUtE,GAAG,cAC/C,6BACE,kBAAC,IAAD,CAAOqE,KAAK,SAAUC,OAAU,WAC9B,OAAQ,kBAAC,IAAMC,SAAP,KACG,yBAAKsB,MAAM,oBACP,kBAAC,EAAD,YAMnB,6BACA,kBAAC,IAAD,CAAOxB,KAAK,QAASC,OAAU,WAC9B,OAAQ,kBAAC,IAAMC,SAAP,KACP,yBAAK/I,UAAU,mBACX,kBAAC,GAAD,CAAMwI,cAAeA,cCvBjB8B,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCZNC,IAAS5B,OACP,kBAAC,IAAM6B,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9H,MAAK,SAAA+H,GACJA,EAAaC,gBAEdC,OAAM,SAAApL,GACLyC,QAAQzC,MAAMA,EAAM6C,a,mBExI5BxD,EAAOC,QAAU,CAAC,aAAe,mCAAmC,MAAQ,8B,mBCA5ED,EAAOC,QAAU,CAAC,YAAc,2BAA2B,KAAO,oBAAoB,QAAU,uBAAuB,UAAY,yBAAyB,KAAO,sB,mBCAnKD,EAAOC,QAAU,CAAC,KAAO,8BAA8B,QAAU,iCAAiC,UAAY,mCAAmC,KAAO,8BAA8B,SAAW,oC,mBCAjMD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,cAAgB,4BAA4B,cAAgB,+B","file":"static/js/main.f1d263ea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"projects\":\"project-general_projects__3kxkZ\",\"projects__list\":\"project-general_projects__list__3cPdw\",\"project__button\":\"project-general_project__button__1uOnt\",\"button\":\"project-general_button__w-v8b\",\"project__title\":\"project-general_project__title__1i0Gd\",\"form\":\"project-general_form__3MrXX\",\"message\":\"project-general_message__1jV2C\",\"textarea\":\"project-general_textarea__auZGE\",\"project__info\":\"project-general_project__info__2Qh6U\",\"project__description\":\"project-general_project__description__92Iu8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"sidebar_sidebar__Y80ct\",\"active\":\"sidebar_active__2zaX5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"settings_settings__132Wp\"};","export const required = (value: any) => {\r\n    if (value)  return undefined;\r\n    return 'Field is required';\r\n  \r\n  }\r\n  \r\n  export const requiredFieldMaxValue = (value: any) => {\r\n    if (value) {if (value.length > 20)  return `Max length is ${20} symbols`;\r\n      return undefined;\r\n      }\r\n    return 'Field is required';\r\n  }\r\n\r\n  export const checkformat = (value: any) => {\r\n    if (value) {if (value !== value.replace(/[^A-Za-z]/ig, ''))  return `must contain only English letters`;\r\n      return undefined;\r\n      }\r\n    return 'Field is required';\r\n  }\r\n  \r\n  \r\n  export const maxLengthCreator = (maxLength: any) => (value) => {\r\n    if (value.length > maxLength)  return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n  \r\n  }\r\n\r\n  export const minLengthCreator = (minLength: any) => (value) => {\r\n    if (value.length < minLength) return `Min length is ${minLength} symbols`;\r\n    return undefined;\r\n  }","import React from 'react';\r\nimport s from './form-control.module.css';\r\nimport { Field, reduxForm} from 'redux-form';\r\n\r\nconst FormControl = ({input, meta, child,...props}) => {\r\n   const hasError = meta.touched && meta.error;\r\n   return (\r\n     <div className={s.form_control+\" \"+ (hasError? s.error: \"\")}>\r\n      <div>\r\n        {props.children}\r\n      </div>\r\n      <div>\r\n      { hasError && <span className={s.error}>{meta.error}</span>}\r\n      </div>\r\n     </div>\r\n   )\r\n}\r\n\r\n\r\nexport const Input = (props: any) => {\r\n   const {input, meta, child,...restProps} = props;\r\n   return <FormControl {...props}> <input {...input} {...restProps} /> </FormControl>\r\n}\r\nexport const Textarea = (props: any) => {\r\n   const {input, meta, child,...restProps} = props;\r\n   return <FormControl {...props}> <textarea {...input} {...restProps} /> </FormControl>\r\n}\r\nexport const File = (props: any) => {\r\n   const {input, meta, child,...restProps} = props;\r\n   return <FormControl {...props}> <input {...input} {...restProps} /> </FormControl>\r\n}\r\n\r\nexport const createField = (name, placeholder, component, type) =>\r\n {\r\n  return (\r\n     <Field name={name}\r\n  placeholder={placeholder}\r\n  component={component}\r\n  type={type} />\r\n)\r\n}","import React, {useState} from \"react\";\nimport { Field, reduxForm } from 'redux-form';\nimport {Input} from '../../utils/form-control';\nimport {File} from '../../utils/form-control';\nimport { Redirect } from \"react-router-dom\"; \nimport {required , maxLengthCreator, minLengthCreator, checkformat} from '../../utils/validators/validators';\nimport { useHistory } from \"react-router-dom\";\nimport m from './login.module.css'\nconst maxLength20 = maxLengthCreator(20);\nconst minLength8 = minLengthCreator(4);\n\nconst Login = (props:any) => {\n    let history = useHistory();\n    let currentLogin;\n    let currentToken;\n    let  currentFont = JSON.parse(localStorage.getItem('state'));\n    if (currentFont) {\n         currentLogin = currentFont.login.login;\n         currentToken = currentFont.login.token;\n    }\n\n    const onSubmitAuthorization = (value: any) => {        \n        if(!props.login) {\n            console.log(\"right\")\n            props.sendFormForAuthorization(value.login, value.password);\n        } \n        if(props.login) {\n            props.sendFormForAuthorization(props.login, value.password);\n             history.push(\"/main/projects\")\n        }\n    }\n    if(props.currentLogin && props.currentToken) {\n        history.push(\"/main/projects\")\n   }\n    return (\n        <div className={m.form}>\n            <LoginFormRedux currentLogin = {currentLogin} currentToken={currentToken} login={props.login} errorCode={props.errorCode} onSubmit={onSubmitAuthorization} />\n            {props.errorCode && <div className={m.message}>{props.errorCode}</div> }\n          </div>\n     \n\n    )\n}\n\nconst LoginForm = (props:any) => {\n\n    let history = useHistory();\n\n    if(props.currentLogin && props.currentToken) {\n         history.push(\"/main/projects\")\n    }\n    return (\n        <>\n         <form className={m.login__form}  onSubmit = {props.handleSubmit}>\n                  <h1 >Log In</h1>\n                {!props.login && <Field component={Input}  validate={[required ]}    name={'login'}  placeholder='Enter login' />}\n                                 <Field component={Input}  validate={[required, minLength8]} type='password'    name={'password'}  placeholder='Enter password' />\n             <button> Submit</button>\n          </form>   \n        </>\n    )\n}\n\nconst LoginFormRedux = reduxForm({\n    form:'postSound'\n  })(LoginForm)\n  \nexport default Login;\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as axios from 'axios';\r\n\r\n/*let  bodyFormData = new FormData();\r\n    bodyFormData.append(\"file\", file);\r\n    bodyFormData.set(\"api_token\", 'e18f6001fd4236175f7dc468d0470702');\r\n    bodyFormData.set(\"return\", \"timecode,apple_music,deezer,spotify\");*/\r\nconst instance = axios.create({\r\n  baseURL: 'https://project23e.herokuapp.com/',\r\n});\r\n\r\nexport const UsersApi = {\r\n    login<T>(login: any, password: any): Promise<T> {\r\n        return instance.get(`/get-users?login=${login}&password=${password}`, {\r\n            login,\r\n            password\r\n        }).then(response  => { return response.data}, (error) => {  return error; })\r\n    },\r\n    createNewProject(title:string, description:string, token:string) {\r\n        return instance.post(`create-new-project/${token}`, {\r\n            title, description,token\r\n        }).then(response => {        \r\n            return response.data;\r\n        })\r\n    },\r\n    saveEditedProject(title: string, description: string, id: string, token: string) {\r\n        return instance.put(`user-ptoject/${id}`, {\r\n            title,\r\n            description,\r\n            token\r\n        }).then(response => {      \r\n            return response.data;\r\n        })\r\n    },\r\n    getProjectsList(token: string) {\r\n        return instance.get(`/user-ptojects?token=${token}`, {\r\n            token\r\n        }).then(response => {\r\n            return response.data;\r\n        })\r\n    },\r\n    deleteProject(id: string, token: string) {\r\n        return instance.delete(`/delete-project/?id=${id}&token=${token}`).then(response => {\r\n            return response.data;\r\n        });\r\n    }\r\n}\r\n","import {UsersApi} from '../api/api' \r\nimport { act } from 'react-dom/test-utils';\r\nconst SET_USER_DATA = 'SET-USER-DATA'; \r\nconst SET_ERROR_DATA = 'SET_ERROR_DATA';\r\n\r\n interface initialState {\r\n  token?: string | null,\r\n  status?:string | null,\r\n  sendCode?:string | null,\r\n  login?:string | null,\r\n  errorCode?: string | null\r\n }\r\nlet initialState: initialState = {\r\n   token: null,\r\n   status:null,\r\n   sendCode:null,\r\n   login:null,\r\n   errorCode: null\r\n  }\r\n\r\n  const loginReducer = ( state = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case SET_USER_DATA: \r\n    console.log(action.data)\r\n      return {\r\n      ...state,  token: action.data.token,\r\n                 status: action.data.status,\r\n                 login: action.data.login,\r\n                 errorCode: action.data.sendCode\r\n      }\r\n    default:\r\n        return state\r\n  }\r\n}\r\n\r\nconst setUserToken = (data: any) => {\r\n  return {\r\n    type: SET_USER_DATA,\r\n    data\r\n    \r\n  }  \r\n}\r\n\r\n\r\nexport const sendFormForAuthorization = (login: string, password: string) => {\r\n  return  async (dispatch: any) => {\r\n     let data = await UsersApi.login(login, password);\r\n     console.log(data)\r\n       dispatch(setUserToken(data))\r\n  }  \r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default loginReducer;","\r\nimport React from 'react';\r\nimport {connect} from   'react-redux';\r\nimport Login from './login.component';\r\nimport {sendFormForAuthorization} from '../../redux/login-reducer'\r\n\r\nlet mapStateToprops = (state: any) => {\r\n  return {\r\n    token: state.login.token,\r\n    status: state.login.status,\r\n    login: state.login.login,\r\n    errorCode: state.login.errorCode\r\n  }\r\n\r\n}\r\n\r\n\r\nconst LoginContainer = connect(mapStateToprops, {sendFormForAuthorization} )(Login);\r\nexport default LoginContainer;","import React from \"react\";\nimport { NavLink, Route } from 'react-router-dom'\nimport s from './sidebar.module.css'\nconst Sidebar = () => {\n    const onEndSession = () => {\n        localStorage.clear();\n    }\n    return (\n        <nav>\n            <div className={s.sidebar}>\n                <NavLink to=\"/main/projects\" activeClassName=\"selected\">My projects </NavLink>\n                <NavLink to=\"/main/create-project\" activeClassName=\"selected\">Create project</NavLink> \n                <NavLink to=\"/login\" activeClassName=\"selected\"><div onClick={onEndSession}>Log Out</div></NavLink>\n                <NavLink to=\"/main/settings\" activeClassName=\"selected\">Settings</NavLink> \n            </div>\n            \n\n        </nav>\n    )\n}\n\nexport default Sidebar;\n","import React, {useState} from \"react\";\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport {Input, Textarea} from '../../utils/form-control';\r\nimport {File} from '../../utils/form-control';\r\nimport { Redirect, Link } from \"react-router-dom\"; \r\nimport {required , maxLengthCreator, minLengthCreator, checkformat} from '../../utils/validators/validators';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport p from './project-creator.module.css'\r\n\r\ninterface Form {\r\n    title?: string,\r\n    description?:string\r\n}\r\n\r\nconst ProjectCreator = (props:any) => {\r\n    const [step, setStep] = useState(1);\r\n    const [title, setTitle] = useState(null);\r\n    let history = useHistory();\r\n    console.log(props)\r\n    const setProjectsTitle = (value:Form) => {\r\n        setTitle(value.title);\r\n        setStep(step +1)\r\n    }\r\n\r\n    const setProjectsDescription = (value:Form) => {\r\n        props.createUsersProject(title, value.description, props.token);\r\n        setStep(step+1)\r\n    }\r\n\r\n    const redirect = () => {\r\n        setTimeout(() =>history.push(\"/main/projects\") , 2000);       \r\n    }\r\n    \r\n    if(step ===3 ) {  \r\n        redirect()\r\n    }\r\n\r\n    if(!props.token) {\r\n        return <Redirect to={`/login`} />;\r\n    }\r\n   \r\n\r\n    const switchForms = () => {  \r\n        console.log(step)   \r\n        switch(step) {\r\n            case 1: \r\n            return(\r\n                <ProjestsTitleRedux onSubmit={setProjectsTitle} />\r\n            )\r\n            case 2: \r\n            return(\r\n                <ProjestsDescriptionRedux onSubmit={setProjectsDescription} />\r\n            )\r\n            default:\r\n                return <div>–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω</div>;     \r\n        } \r\n      }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                switchForms()\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nconst ProjestsTitleForm = (props:any) => {\r\n    return (\r\n        <>\r\n         <form   className={p.form} onSubmit = {props.handleSubmit}>\r\n             <h3 >Enter title</h3>\r\n             <Field component={Input}     validate={[required, checkformat]}  name={'title'}  placeholder='String from soung' />\r\n             <button> Next </button>\r\n          </form>   \r\n        </>\r\n    )\r\n}\r\n\r\nconst ProjestsDescriptionForm = (props:any) => {\r\n    return (\r\n        <>\r\n         <form   className={p.form} onSubmit = {props.handleSubmit}>\r\n             <h1 >Enter description </h1>\r\n             <Field component={Textarea}  cols=\"40\" rows=\"10\"  className={p.textarea} validate={[required]}  name={'description'}/>\r\n             <button> Submit</button>\r\n          </form>   \r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst ProjestsTitleRedux = reduxForm({\r\n    form:'postSound'\r\n  })(ProjestsTitleForm)\r\n\r\nconst ProjestsDescriptionRedux = reduxForm({\r\n    form:'postSound'\r\n  })(ProjestsDescriptionForm)\r\n\r\nexport default ProjectCreator;","import {UsersApi} from '../api/api'\r\n\r\nconst SET_PROJECT_ID = 'SET-PROJECT-ID'; \r\nlet initialState = {\r\n    projectId: null,\r\n  }\r\n\r\n  const projectCreatorReducer = ( state = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case SET_PROJECT_ID: \r\n      return {\r\n        projectId: action.projectId,\r\n\r\n      }\r\n    default:\r\n        return state\r\n  }\r\n}\r\n\r\nconst setProjectToken = (projectId) => {\r\n  return {\r\n    type: SET_PROJECT_ID,\r\n    projectId\r\n    \r\n  }\r\n  \r\n}\r\n\r\nexport const createUsersProject = (title, description, token) => {\r\n  return  async (dispatch) => {\r\n    console.log(title, description ,token)\r\n    let data = await UsersApi.createNewProject(title, description, token);\r\n     dispatch(setProjectToken(data.projectId))\r\n    console.log(data)\r\n  }  \r\n\r\n  }\r\n\r\nexport default projectCreatorReducer;","\r\nimport React from 'react';\r\nimport {connect} from   'react-redux';\r\nimport ProjectCreator from './project_creator.component';\r\nimport {createUsersProject} from '../../redux/project-—Åreator-reducer'\r\nlet mapStateToprops = (state: any) => {\r\n  return {\r\n    token: state.login.token,\r\n    projectId: state.projectCreator.projectId\r\n  }\r\n\r\n}\r\n\r\n\r\nconst ProjectCreatorContainer = connect(mapStateToprops, {createUsersProject} )(ProjectCreator);\r\nexport default ProjectCreatorContainer;","import React, {useEffect, useState } from \"react\";\r\nimport p from './project-general.module.css'\r\nimport { Redirect } from \"react-router-dom\"; \r\nimport { Field, reduxForm, Form } from 'redux-form';\r\nimport {Input, Textarea} from '../../utils/form-control';\r\nimport {required, checkformat} from '../../utils/validators/validators';\r\n\r\ninterface ProjectEditForm {\r\n    titleEdit:string,\r\n    descriptionEdit: string\r\n}\r\n\r\ninterface ProjectsList {\r\n    _id: string,\r\n    title:string,\r\n    description: string,\r\n    token: string\r\n}\r\ninterface ShowFullProject {\r\n    setShow: object,\r\n    token: string,\r\n    removeUsersProject: object,\r\n    editUserProject: object,\r\n    projectsList: ProjectsList\r\n}\r\n\r\nconst ProjectGeneral = (props:any) => {\r\n\r\n   useEffect(() => {\r\n     props.getUsersProjects(props.token)\r\n    }, []); \r\n\r\n    if(!props.token) {\r\n        return <Redirect to={`/login`} />;\r\n        }\r\n\r\n    return (\r\n        <div className={p.projects}>\r\n          { props.projectsList.map( (el:ProjectsList , index:number) => {\r\n             return  <ProjectsList   key={index} status={props.status} removeUsersProject={props.removeUsersProject}  getUsersProjects={props.getUsersProjects} token={props.token} editUserProject={props.editUserProject}  projectsList ={el} />\r\n           }) }\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst ProjectsList = (props:ShowFullProject) => {\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const onShowDescription = () => {       \r\n        setShow(!show)\r\n    }\r\n\r\n    return (\r\n        <div className={p.projects__container}>\r\n            <div className={p.projects__list}>\r\n                <div className={p.project__title}>{props.projectsList.title}</div>\r\n                <div className={p.project__button}>\r\n                     <button  className={p.button}  onClick={ onShowDescription} >Expander</button>\r\n                </div>  \r\n            </div>\r\n            {show && <ShowFullProjectData setShow={setShow} \r\n                                          token={props.token}\r\n                                          removeUsersProject={props.removeUsersProject}\r\n                                          editUserProject={props.editUserProject}\r\n                                          projectsList = {props.projectsList} \r\n             /> }\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst ShowFullProjectData = (props:any) => {\r\n    const [edit, setEdit] = useState('disable');\r\n\r\n    const onEditMode = () => {\r\n        setEdit('enable')\r\n    }\r\n\r\n    const onSaveEdit = (value:ProjectEditForm):void => {\r\n        props.editUserProject(value.titleEdit, value.descriptionEdit, props.projectsList._id, props.token);\r\n          hideForm();        \r\n    }\r\n    const hideForm = () => {\r\n        props.setShow(false)\r\n        setEdit('disable')\r\n    }\r\n\r\n    const onDeleteProject = () => {\r\n        props.setShow(false)\r\n        props.removeUsersProject(props.projectsList._id, props.token);\r\n    }\r\n\r\n    return (\r\n     <div  className={p.project__info}>\r\n        { edit === 'disable' && \r\n        <div>\r\n            <div className={p.project__title}>\r\n              {props.projectsList.title}\r\n              <div>\r\n                <button className={p.button} onClick = {onEditMode} >Edit</button>\r\n              </div>\r\n            </div>\r\n            <div className={p.project__description}>\r\n              {props.projectsList.description}\r\n            </div>\r\n         </div>\r\n        }\r\n        { edit === 'enable' &&\r\n            <>\r\n              <div>\r\n                  <button className={p.button} onClick={onDeleteProject} type=\"button\"  name=\"button\">Delete </button> \r\n              </div>\r\n              <div>\r\n                <EditFormRedux onSubmit ={onSaveEdit} \r\n                               projectsList ={props.projectsList} \r\n                               initialValues={{\r\n                                                titleEdit: props.projectsList.title,\r\n                                                descriptionEdit:props.projectsList.description\r\n                                                }}\r\n                                                 />\r\n              </div>\r\n            </>\r\n        }\r\n     </div>    \r\n        \r\n    )\r\n}\r\n\r\n\r\nconst EditForm = (props:any) => {\r\n    return (\r\n        <>\r\n         <form  className={p.form} onSubmit = {props.handleSubmit} >\r\n             <Field component={Input}  validate={[required, checkformat]}    name={'titleEdit'}  />\r\n             <Field component={Textarea}  cols=\"40\" rows=\"10\"  className={p.textarea} validate={[required]} name={'descriptionEdit'}   />\r\n             <button>Submit</button>\r\n          </form>   \r\n        </>\r\n    )\r\n}\r\n\r\nexport const EditFormRedux = reduxForm({\r\n    form:'EditForm',\r\n    enableReinitialize: true\r\n  })(EditForm)\r\n\r\n\r\nexport default ProjectGeneral;","import {UsersApi} from '../api/api' \r\nimport { act } from 'react-dom/test-utils';\r\nconst GET_USERS_PROJECTS = 'GET_USERS_PROJECTS'; \r\nconst EDIT_STATUS = 'EDIT_STATUS';\r\nlet initialState = {\r\n   token: null,\r\n   projectsList: [],\r\n   status:null\r\n  }\r\n\r\n  const projectReducer = ( state = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case GET_USERS_PROJECTS: \r\n      return {\r\n         projectsList: action.data,\r\n\r\n      }\r\n      case EDIT_STATUS:\r\n        return {\r\n          ...state, status: action.status\r\n        }\r\n    default:\r\n        return state\r\n  }\r\n}\r\n\r\nconst getUsersProjectsList = (data: object) => {\r\n  return {\r\n    type: GET_USERS_PROJECTS,\r\n    data\r\n    \r\n  }\r\n  \r\n}\r\n\r\nconst checkEditStatus = (status: string) => {\r\n  return {\r\n    type: EDIT_STATUS,\r\n    status\r\n  }\r\n}\r\n\r\nexport const editUserProject = (title: string, description: string,id: string, token:string) => {\r\n  return  async (dispatch: any) => {\r\n     let data = await UsersApi.saveEditedProject(title, description,id, token);\r\n       dispatch(getUsersProjectsList(data))\r\n  }  \r\n}\r\n\r\nexport const getUsersProjects = (token: string) => {\r\n  return  async (dispatch: any) => {\r\n     let data = await UsersApi.getProjectsList(token);\r\n       dispatch(getUsersProjectsList(data)) \r\n  }  \r\n}\r\nexport const removeUsersProject = (id: string, token: string) => {\r\n  return   async (dispatch: any) => {\r\n     let data = await UsersApi.deleteProject(id, token);\r\n     dispatch(getUsersProjectsList(data)) \r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default projectReducer;","import {connect} from   'react-redux';\r\nimport ProjectGeneral from './project-general.component';\r\nimport {getUsersProjects, editUserProject, removeUsersProject} from '../../redux/project-reducer'\r\nlet mapStateToprops = (state: any) => {\r\n  return {\r\n    token: state.login.token,\r\n    projectsList: state.projects.projectsList,\r\n    status: state.projects.status\r\n  }\r\n\r\n}\r\n\r\n\r\nconst ProjectGeneralContainer = connect(mapStateToprops, {getUsersProjects, editUserProject, removeUsersProject} )(ProjectGeneral);\r\nexport default ProjectGeneralContainer;","import React, { useState, useRef } from \"react\";\nimport { NavLink, Route } from 'react-router-dom'\nimport s from './settings.module.css'\nconst Settings = (props) => { \n   \n    const [mode, setMode] = useState(false);\n\n   const handleChange = () => {\n       setMode(!mode)\n       props.triggerSearch(mode);\n       \n   }\n    return (\n       <div className={s.settings}>\n             <input\n                checked={mode}\n                  type=\"checkbox\"\n                  name={'name'}\n                  onChange={handleChange}\n             />\n             <span>Light/Dark</span>\n       </div>\n    )\n}\n\nexport default Settings;\n","import React from \"react\";\nimport Sidebar from \"../sidebar/sidebar.component\";\nimport ProjectCreatorContainer from '../project-creator/project-creator-container.component';\nimport ProjectGeneralContainer from '../project-general/project-general-container.component';\nimport {Route} from  'react-router-dom';\nimport Settings from \"../settings/settings.component\";\nimport main from './main.module.css';\nconst Main = (props) => {\n    return (\n        <div className={main.main}>\n            <div className={main.main__sidebar}>\n                <Sidebar/>\n            </div>\n            <div className={main.main__general}>\n                <Route path='/main/create-project'  component = { ProjectCreatorContainer } />\n                <Route path='/main/projects'  render = { () => {\n                   return    <React.Suspense>\n                      <ProjectGeneralContainer/>\n                     </React.Suspense>\n                    }} />\n                <Route path='/main/settings'  render = { () => {\n                   return    <React.Suspense>\n                      <Settings triggerSearch={props.triggerSearch}/>\n                     </React.Suspense>\n                    }} />\n            </div>\n        </div>\n    )\n}\n\nexport default Main;\n","import {createStore} from 'redux';\r\nimport {applyMiddleware} from 'redux';\r\nimport { combineReducers } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport loginReducer from './login-reducer'\r\nimport projectReducer from './project-reducer'\r\nimport projectCreatorReducer from './project-—Åreator-reducer'\r\nlet reducers = combineReducers({\r\n projectCreator:projectCreatorReducer,\r\n login:loginReducer,\r\n projects: projectReducer,\r\n form: formReducer\r\n});\r\n\r\nconst saveToLocalStorage = (state) => {\r\n    try {\r\n      const serializedState = JSON.stringify(state)\r\n      localStorage.setItem('state', serializedState)\r\n    } catch(e) {\r\n      console.log(e);\r\n    }\r\n  }\r\nconst loadFromLocalStorage = () => {\r\n    try {\r\n      const serializedState =  localStorage.getItem('state')\r\n      if (serializedState === null) return undefined\r\n      return JSON.parse(serializedState)\r\n    } catch(e) {\r\n      console.log(e);\r\n      return undefined;\r\n    }\r\n}  \r\n\r\nconst persistedState = loadFromLocalStorage();\r\n\r\n\r\n  \r\nlet store: any = createStore(reducers,persistedState,applyMiddleware(thunkMiddleware));\r\nstore.subscribe(()=> saveToLocalStorage(store.getState()))\r\nwindow.store = store;\r\n\r\nexport default  store;","import React, { useState } from 'react';\nimport './App.css';\nimport LoginContainer from './components/login/login-container.component';\nimport Main from './components/main/main.component';\n\nimport {HashRouter, Route, Redirect, BrowserRouter} from  'react-router-dom';\nimport {Provider} from  'react-redux';\nimport store from './redux/redux_store'\n\n\nconst App = () => { \n\n  const [mode, setMode] = useState(true);\n  const triggerSearch = (value:Boolean) => {\n    setMode(value)\n  }\n  return (\n    <div className={mode? \"container_light\": \"container_dark\"}>\n      <HashRouter basename={process.env.PUBLIC_URL}>\n        <Provider  store ={store} >\n        <Route exact path='/' render={() => <Redirect to='/login'/>}/>\n          <div>\n            <Route path='/login'  render= { ()=> {\n              return  <React.Suspense>\n                         <div class='container__login'>\n                             <LoginContainer />\n              \n                         </div>\n                    </React.Suspense>\n            }} />\n          </div>\n          <div >\n          <Route path='/main'  render= { ()=> {\n           return  <React.Suspense>\n            <div className=\"container__main\">\n                <Main triggerSearch={triggerSearch} />\n            </div>\n              </React.Suspense>\n        }} />\n         </div>\n         </Provider>\n       </HashRouter>\n    \n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_control\":\"form-control_form_control__1RMN8\",\"error\":\"form-control_error__218LK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login__page\":\"login_login__page__qgthF\",\"form\":\"login_form__Fv0Ml\",\"message\":\"login_message__2PgTH\",\"container\":\"login_container__uZxKL\",\"info\":\"login_info__3cpon\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"project-creator_form__3OKLZ\",\"message\":\"project-creator_message__k2z4N\",\"container\":\"project-creator_container__35A-A\",\"info\":\"project-creator_info__hS9br\",\"textarea\":\"project-creator_textarea__3dC2h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"main_main__3A9qg\",\"main__sidebar\":\"main_main__sidebar__cU6C8\",\"main__general\":\"main_main__general__5rodv\"};"],"sourceRoot":""}